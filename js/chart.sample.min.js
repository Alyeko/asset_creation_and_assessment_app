var assetData;
var reportingRatesData;
var assetsJson = []
var labels_to_use = []
var data_to_use = []
var colour_to_use = []
var days_of_the_week = []
var reports_submitted = []
var reports_not_working = []
var barChart;
var polarChart;
var mixedLineChart;

function getUsersAssetsAndCondition(){
var baseComputerAddress = document.location.origin;
var assetsDataAddress="/api/geoJSONUserId/"+user_id+""
var assetsLayerURL = baseComputerAddress + assetsDataAddress;

$.ajax({url: assetsLayerURL, async: false, crossDomain: true,success: function(result){
	assetData = result
  
  for (var j = 0; j < assetData['features'].length; j++) {
    entry = {'asset_name':assetData['features'][j]['properties']['asset_name'], 
    'condition_description':assetData['features'][j]['properties']['condition_description'], 
    'condition_number':null}

    if (entry['condition_description'] == "Element is in very good condition"){entry['condition_number']=1}
    else if (entry['condition_description'] == "Some aesthetic defects, needs minor repair"){entry['condition_number']=2}
    else if (entry['condition_description'] == "Functional degradation of some parts, needs maintenance"){entry['condition_number']=3}
    else if (entry['condition_description'] == "Not working and maintenance must be done as soon as reasonably possible"){entry['condition_number']=4}
    else if (entry['condition_description'] == "Not working and needs immediate, urgent maintenance"){entry['condition_number']=5}
    else if (entry['condition_description'] == "Unknown"){entry['condition_number']=6}
    assetsJson.push(entry)} //assetsJson is the dataset which as 3 keys(asset_name, condition_description and condition_number)

    
    for (var j = 0; j < assetsJson.length; j++) {
        labels_to_use.push(assetsJson[j]['asset_name'])  //labels_to_use variable holds the asset_names of the users assets
    }
     

    for (var j = 0; j < assetsJson.length; j++) {
        data_to_use.push(assetsJson[j]['condition_number']) //data_to_use variable holds the condition numbers of the corresponding assets
    }
     
    
    for (var j = 0; j < assetsJson.length; j++) {
        var colour=null;

        if (assetsJson[j]['condition_number']==1) {colour='#F86708'}  //colours obtained from https://htmlcolorcodes.com/
        else if (assetsJson[j]['condition_number']==2) {colour='#5FC536'}
        else if (assetsJson[j]['condition_number']==3) {colour='#248EF7'}
        else if (assetsJson[j]['condition_number']==4) {colour='#919497'}
        else if (assetsJson[j]['condition_number']==5) {colour='#F3051A'}
        else {colour='#0C0B00'}
        colour_to_use.push(colour) //colour_to_use variable holds the condition numbers of the corresponding assets'
    }}})}
    
function getDailyParticipationRatesData(){
      var baseComputerAddress = document.location.origin;
      var dailyRatesDataAddress="/api/dailyParticipationRates"
      var dailyRatesLayerURL = baseComputerAddress + dailyRatesDataAddress;

$.ajax({url: dailyRatesLayerURL, async: false, crossDomain: true,success: function(result){
  reportingRatesData = result
  drrdata = reportingRatesData[0]['array_to_json'];
  const map = {'Sunday':1, 'Monday': 2,'Tuesday': 3, 'Wednesday': 4,  //this code block sorts the json according to the days of 
                    'Thursday': 5, 'Friday': 6,'Saturday': 7};       //the week as they occur(adapted from 
                                                                  //https://www.tutorialspoint.com/sorting-objects-according-to-days-name-javascript)
 drrdata.sort((a, b) => {return map[a.day] - map[b.day]});
 for (var j = 0; j < drrdata.length; j++) { days_of_the_week.push(drrdata[j]['day'])}
 
 for (var j = 0; j < drrdata.length; j++) { reports_submitted.push(drrdata[j]['reports_submitted'])}

 for (var j = 0; j < drrdata.length; j++) { reports_not_working.push(drrdata[j]['reports_not_working'])}
    }})}

var asset_name_clicked_on_bar;
function plotBarChart(){
        barChart = new Chart(document.getElementById("barGraphContainer"), { //this code was adapted from https://tobiasahlin.com/blog/chartjs-charts-to-get-you-started/
        type: 'bar',
        data: {
          labels: labels_to_use,
          datasets: [
            {
              label: "",
              backgroundColor: colour_to_use,
              data: data_to_use
            }
          ]
        },
        options: {
          onClick: function (event, elements){  //this bit of code was adapted from https://stackoverflow.com/questions/67721891/how-to-determine-which-bar-was-clicked-on-a-chart-js
                 if (elements.length > 0) {   
                     // To get the clicked element
                     const clickedElement = this.getElementAtEvent(event);
                     asset_name_clicked_on_bar = clickedElement[0]._model.label
                     zoomToCesiumPointBasedOnBarClicked(asset_name_clicked_on_bar, entities) //based on which bar is clicked, the corresponding asset point is zoomed to on the cesium globe
                     
                     const groupIndex = clickedElement[0]._index;

                     const barIndex = clickedElement[0]._datasetIndex;
                 }
             },
          legend: { display: false },
          title: {
            display: true,
            text: 'Bar plot of asset names against condition number'
          },
          scales: {
          yAxes: [{
            display: true,                     //bit of code adapted from https://stackoverflow.com/questions/27910719/in-chart-js-set-chart-title-name-of-x-axis-and-y-axis
            stacked:true,
            scaleLabel: {
            display: true,
            labelString: 'Condition Number',
            fontStyle: "bold",
                    },
            ticks: {
                    min: 0   // minimum value will be 0, adapted from https://stackoverflow.com/questions/28990708/how-to-set-max-and-min-value-for-y-axis
                  },
                  }],
            xAxes: [{
              display: true,
              scaleLabel: {
                display: true,
                labelString: 'Name of Asset',
                fontStyle: "bold",
              },
              ticks:{
                maxRotation: 90,  //adapted from https://stackoverflow.com/questions/35022830/chart-js-change-label-orientation-on-x-axis-for-line-charts
                minRotation: 90
              }
            }]
          }
        }
    });
        }

function plotPolarChart(){
        polarChart = new Chart(document.getElementById("polarAreaChart"), { //this code was adapted from https://tobiasahlin.com/blog/chartjs-charts-to-get-you-started/
        type: 'polarArea',
        data: {
          labels: labels_to_use,
          datasets: [
            {
              label: "",
              backgroundColor: colour_to_use,
              data: data_to_use
            }
          ]
        },
        options: {
          onClick: function (event, elements){  //this bit of code was adapted from https://stackoverflow.com/questions/67721891/how-to-determine-which-bar-was-clicked-on-a-chart-js
                 if (elements.length > 0) {   
                     // To get the clicked element
                     const clickedElement = this.getElementAtEvent(event);
                     asset_name_clicked_on_polar_chart = clickedElement[0]._model.label
                     zoomToCesiumPointBasedOnBarClicked(asset_name_clicked_on_polar_chart, entities) //based on which entity on the polar chart is clicked, the corresponding asset point is zoomed to on the cesium globe
                     
                     const groupIndex = clickedElement[0]._index;

                     const polarChartIndex = clickedElement[0]._datasetIndex;
                 }
             },
          legend: { display: false },
          title: {
            display: true,
            text: 'Polar chart of asset names and their condition number'
          },
          }
    });

  }

function plotMixedLineChart() {
  mixedLineChart = new Chart(document.getElementById("mixedLineChart"), {
  type: 'line',
  data: {
    labels: days_of_the_week, // array containing the days of the week
    datasets: [{ 
        data: reports_submitted,
        label: "reports_submitted",
        borderColor: "#DFCD17",
        fill: false
      }, { 
        data: reports_not_working, //corresponding reporting rates for the particular day of the week
        label: "reports_not_working",
        borderColor: "#404080",
        fill: false
      }]
  },
  options: {
    title: {
      display: true,
      text: 'Daily Rates Participation Data'
    }
  }
});}

var user_id;
function getUserId(){
  var baseComputerAddress = document.location.origin;
  var dataAddress= "/api/getUserId";
  var URL = baseComputerAddress + dataAddress;
  $.ajax({url: URL, async: false, crossDomain: true,success: function(result){
    user_id = result.user_id;
    }})
}

function getNumAssets(){
  getUserId()
  var baseComputerAddress = document.location.origin;
  var dataAddress= "/api/getNumberofAssets/"+user_id+"";
  var URL = baseComputerAddress + dataAddress;
  $.ajax({url: URL, async: false, crossDomain: true,success: function(result){
    document.getElementById("number_assets_created").innerHTML = result['num_assets']  
}})}  


function conditionReportsSubmitted(){
  getUserId()
  var baseComputerAddress = document.location.origin;
  var dataAddress= "/api/userConditionReports/"+user_id+"";
  var URL = baseComputerAddress + dataAddress;
  $.ajax({url: URL, async: false, crossDomain: true,success: function(result){
    document.getElementById("number_conditions_submitted").innerHTML = result['num_reports']  
}})}

//defining the user Ranking data
function userRanking4Dash(){
    getUserId()
    var userRankvalue;
    var baseComputerAddress = document.location.origin;
    var userRankingDataAddress="/api/userRanking/"+user_id+"";
    var userRankingURL = baseComputerAddress + userRankingDataAddress;

    $.ajax({url: userRankingURL, async: false, crossDomain: true,success: function(result){
        userRankvalue = result.rank;
        document.getElementById("urank").innerHTML = userRankvalue}});
      }
